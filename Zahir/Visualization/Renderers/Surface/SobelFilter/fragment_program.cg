// sampler ImageMap: register(s0);
// This shader applies a Sobel filter to detect edges in the image.
// The Sobel filter extracts the first order derivates of the image,
// that is, the slope. Where the slope is sharp there is an edge.
// These are the filter kernels:
//
//  SobelX       SobelY
//  1  0 -1      1  2  1
//  2  0 -2      0  0  0
//  1  0 -1     -1 -2 -1


// One pixel offset
const float off = 1.0 / 512.0;

float4 main(float2 texCoord: TEXCOORD, sampler ImageMap) : COLOR {
   // Sample neighbor pixels
   float s00 = tex2D(ImageMap, texCoord + float2(-off, -off)).r;
   float s01 = tex2D(ImageMap, texCoord + float2( 0,   -off)).r;
   float s02 = tex2D(ImageMap, texCoord + float2( off, -off)).r;

   float s10 = tex2D(ImageMap, texCoord + float2(-off,  0)).r;
   float s12 = tex2D(ImageMap, texCoord + float2( off,  0)).r;

   float s20 = tex2D(ImageMap, texCoord + float2(-off,  off)).r;
   float s21 = tex2D(ImageMap, texCoord + float2( 0,    off)).r;
   float s22 = tex2D(ImageMap, texCoord + float2( off,  off)).r;

   // Sobel filter in X direction
   float sobelX = s00 + 2 * s10 + s20 - s02 - 2 * s12 - s22;
   // Sobel filter in Y direction
   float sobelY = s00 + 2 * s01 + s02 - s20 - 2 * s21 - s22;

   // Find edge, skip sqrt() to improve performance ...
   float edgeSqr = (sobelX * sobelX + sobelY * sobelY);
   // ... and threshold against a squared value instead.
   return edgeSqr > 0.07 * 0.07;
}